"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: make this more generic and reuse code for static resources and this
const path_1 = require("path");
const glob_1 = require("glob");
const vscode_languageserver_1 = require("vscode-languageserver");
const util_1 = require("util");
const fs = __importStar(require("fs-extra"));
const glob = util_1.promisify(glob_1.Glob);
const CONTENT_ASSET_DECLARATION_FILE = '.sfdx/typings/lwc/contentassets.d.ts';
const CONTENT_ASSETS = new Set();
function resetContentAssets() {
    CONTENT_ASSETS.clear();
}
exports.resetContentAssets = resetContentAssets;
function getResourceName(resourceMetaFile) {
    const resourceFile = resourceMetaFile.substring(0, resourceMetaFile.lastIndexOf('-'));
    return path_1.parse(resourceFile).name;
}
async function updateContentAssetIndex(updatedFiles, { workspaceRoots }, writeConfigs = true) {
    let didChange = false;
    for (const f of updatedFiles) {
        if (f.uri.endsWith('.asset-meta.xml')) {
            if (f.type === vscode_languageserver_1.FileChangeType.Created) {
                didChange = true;
                CONTENT_ASSETS.add(getResourceName(f.uri));
            }
            else if (f.type === vscode_languageserver_1.FileChangeType.Deleted) {
                CONTENT_ASSETS.delete(getResourceName(f.uri));
                didChange = true;
            }
        }
    }
    if (didChange) {
        return processContentAssets(workspaceRoots[0], writeConfigs);
    }
}
exports.updateContentAssetIndex = updateContentAssetIndex;
function processContentAssets(workspace, writeConfig) {
    if (CONTENT_ASSETS.size > 0 && writeConfig) {
        return fs.writeFile(path_1.join(workspace, CONTENT_ASSET_DECLARATION_FILE), generateTypeDeclarations());
    }
}
async function indexContentAssets(context, writeConfigs) {
    const { workspaceRoots } = context;
    const { sfdxPackageDirsPattern } = await context.getSfdxProjectConfig();
    const CONTENT_ASSET_GLOB_PATTERN = `${sfdxPackageDirsPattern}/**/contentassets/*.asset-meta.xml`;
    try {
        const files = await glob(CONTENT_ASSET_GLOB_PATTERN, { cwd: workspaceRoots[0] });
        for (const file of files) {
            CONTENT_ASSETS.add(getResourceName(file));
        }
        return processContentAssets(workspaceRoots[0], writeConfigs);
    }
    catch (err) {
        console.log(`Error queuing up indexing of content resources. Error details:`, err);
        throw err;
    }
}
exports.indexContentAssets = indexContentAssets;
function generateTypeDeclarations() {
    let resTypeDecs = '';
    const sortedContentAssets = Array.from(CONTENT_ASSETS).sort();
    sortedContentAssets.forEach(res => {
        resTypeDecs += generateTypeDeclaration(res);
    });
    return resTypeDecs;
}
function generateTypeDeclaration(resourceName) {
    const result = `declare module "@salesforce/contentAssetUrl/${resourceName}" {
    var ${resourceName}: string;
    export default ${resourceName};
}
`;
    return result;
}
//# sourceMappingURL=content-assets-util.js.map