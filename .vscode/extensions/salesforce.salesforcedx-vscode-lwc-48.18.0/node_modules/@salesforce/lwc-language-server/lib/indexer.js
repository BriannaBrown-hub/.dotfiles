"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const custom_components_util_1 = require("./metadata-utils/custom-components-util");
exports.getLwcTags = custom_components_util_1.getLwcTags;
exports.eventEmitter = custom_components_util_1.eventEmitter;
const custom_labels_util_1 = require("./metadata-utils/custom-labels-util");
const static_resources_util_1 = require("./metadata-utils/static-resources-util");
const content_assets_util_1 = require("./metadata-utils/content-assets-util");
const message_channel_util_1 = require("./metadata-utils/message-channel-util");
const lightning_lsp_common_1 = require("@salesforce/lightning-lsp-common");
exports.getLanguageService = lightning_lsp_common_1.getLanguageService;
const events_1 = require("events");
const { WorkspaceType } = lightning_lsp_common_1.shared;
class LWCIndexer {
    constructor(context, writeConfigs = true) {
        this.eventEmitter = new events_1.EventEmitter();
        this.context = context;
        this.writeConfigs = writeConfigs;
        this.eventEmitter = custom_components_util_1.eventEmitter;
    }
    async configureAndIndex() {
        const indexingTasks = [];
        if (this.context.type !== WorkspaceType.STANDARD_LWC) {
            indexingTasks.push(custom_components_util_1.loadStandardComponents(this.context, this.writeConfigs));
        }
        indexingTasks.push(custom_components_util_1.indexCustomComponents(this.context, this.writeConfigs));
        if (this.context.type === WorkspaceType.SFDX) {
            indexingTasks.push(static_resources_util_1.indexStaticResources(this.context, this.writeConfigs));
            indexingTasks.push(content_assets_util_1.indexContentAssets(this.context, this.writeConfigs));
            indexingTasks.push(custom_labels_util_1.indexCustomLabels(this.context, this.writeConfigs));
            indexingTasks.push(message_channel_util_1.indexMessageChannels(this.context, this.writeConfigs));
        }
        this.indexingTasks = Promise.all(indexingTasks).then(() => undefined);
        return this.indexingTasks;
    }
    async waitOnIndex() {
        return this.indexingTasks;
    }
    resetIndex() {
        custom_components_util_1.resetCustomComponents();
        custom_labels_util_1.resetCustomLabels();
        static_resources_util_1.resetStaticResources();
        content_assets_util_1.resetContentAssets();
        message_channel_util_1.resetMessageChannels();
    }
    async handleWatchedFiles(workspaceContext, change) {
        const changes = change.changes;
        if (lightning_lsp_common_1.utils.isLWCRootDirectoryCreated(workspaceContext, changes)) {
            const startTime = process.hrtime();
            workspaceContext.getIndexingProvider('lwc').resetIndex();
            await workspaceContext.getIndexingProvider('lwc').configureAndIndex();
            console.info('reindexed workspace in ' + lightning_lsp_common_1.utils.elapsedMillis(startTime), changes);
        }
        else {
            await Promise.all([
                static_resources_util_1.updateStaticResourceIndex(changes, workspaceContext, this.writeConfigs),
                content_assets_util_1.updateContentAssetIndex(changes, workspaceContext, this.writeConfigs),
                custom_labels_util_1.updateLabelsIndex(changes, workspaceContext, this.writeConfigs),
                custom_components_util_1.updateCustomComponentIndex(changes, workspaceContext, this.writeConfigs),
                message_channel_util_1.updateMessageChannelsIndex(changes, workspaceContext, this.writeConfigs),
            ]);
        }
    }
}
exports.LWCIndexer = LWCIndexer;
//# sourceMappingURL=indexer.js.map