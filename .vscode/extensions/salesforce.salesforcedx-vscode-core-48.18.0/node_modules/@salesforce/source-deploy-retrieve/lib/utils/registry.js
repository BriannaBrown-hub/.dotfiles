"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
/**
 * Returns the `MetadataXml` info from a given file path. If the path is not a
 * metadata xml file (-meta.xml), returns `undefined`
 *
 * @param fsPath
 */
exports.parseMetadataXml = (fsPath) => {
    const match = path_1.basename(fsPath).match(/(.+)\.(.+)-meta\.xml/);
    if (match) {
        return { fullName: match[1], suffix: match[2] };
    }
};
const find = (directory, fullName, findMetaXml) => {
    const fileName = fs_1.readdirSync(directory).find(f => {
        const parsed = exports.parseMetadataXml(path_1.join(directory, f));
        const metaXmlCondition = findMetaXml ? !!parsed : !parsed;
        return f.startsWith(fullName) && metaXmlCondition;
    });
    if (fileName) {
        return path_1.join(directory, fileName);
    }
};
exports.findMetadataXml = (directory, fullName) => find(directory, fullName, true);
/**
 * If there's more than one content file with the same fullName, it will
 * return the first one found.
 */
exports.findMetadataContent = (directory, fullName) => find(directory, fullName, false);
/**
 * Deeply freezes an object, making the entire thing immutable.
 * @param object Object to deep freeze
 */
exports.deepFreeze = (object) => {
    const propNames = Object.getOwnPropertyNames(object);
    for (const name of propNames) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const val = object[name];
        if (val && typeof val === 'object') {
            exports.deepFreeze(val);
        }
    }
    return Object.freeze(object);
};
//# sourceMappingURL=registry.js.map