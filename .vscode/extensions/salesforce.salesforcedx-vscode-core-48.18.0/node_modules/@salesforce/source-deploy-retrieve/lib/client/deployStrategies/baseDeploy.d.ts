import { Connection } from '@salesforce/core';
import { DeployResult, MetadataComponent, SourceResult } from '../../types';
import { ToolingCreateResult } from '../../utils/deploy';
export declare abstract class BaseDeploy {
    connection: Connection;
    component: MetadataComponent;
    constructor(connection: Connection);
    abstract deploy(component: MetadataComponent): Promise<DeployResult>;
    buildMetadataField(metadataContent: string): {
        label?: string;
        packageVersions?: string;
        status?: string;
        apiVersion: string;
    };
    protected toolingCreate(type: string, record: object): Promise<ToolingCreateResult>;
    upsertBundle(Id?: string): Promise<ToolingCreateResult>;
    protected formatBundleOutput(deployResults: SourceResult[], failure?: boolean): DeployResult;
    protected createDeployResult(filepath: string, success: boolean, created: boolean, problem?: string): SourceResult;
    protected getFormattedPaths(filepath: string): string[];
}
