import { SourceAdapter, MetadataComponent, MetadataType, MetadataRegistry, SourcePath } from '../../types';
import { ForceIgnore } from '../forceIgnore';
/**
 * The default source adapter.
 *
 * Direct usage of this adapter is for simple types with no additional content.
 * Unless there's a particular reason not to, other adapters will extend this one.
 * It handles shared functionality amongst the other adapters.
 *
 * __Example Types__:
 *
 * Layouts, PermissionSets, FlexiPages
 *
 * __Example Structure__:
 * ```text
 * foos/
 * ├── foo.ext-meta.xml
 * ├── bar.ext-meta.xml
 *```
 */
export declare class BaseSourceAdapter implements SourceAdapter {
    protected type: MetadataType;
    protected registry: MetadataRegistry;
    protected forceIgnore: ForceIgnore;
    constructor(type: MetadataType, registry?: MetadataRegistry, forceIgnore?: ForceIgnore);
    /**
     * At the time of writing, Typescript does not have a `final` keyword so
     * nothing is stopping you from overriding this method. It's best if you don't
     * because this handles shared functionality across adapters. If you must,
     * create a new implementation of `SourceAdapter`.
     *
     * @param fsPath File path for a piece of metadata
     */
    getComponent(fsPath: SourcePath): MetadataComponent;
    /**
     * Override this method to tell the adapter how to locate a component's
     * root metadata xml file.
     *
     * @param pathToSource Path to a non root metadata xml file
     */
    protected getMetadataXmlPath(pathToSource: SourcePath): SourcePath | undefined;
    /**
     * Override this method to tell the adapter how to locate a component's
     * source files.
     *
     * @param fsPath File path to base the inference of other source files
     * @param isMetaXml Whether or not the provided file path is a root metadata xml file
     */
    protected getSourcePaths(fsPath: SourcePath, // eslint-disable-line @typescript-eslint/no-unused-vars
    isMetaXml: boolean): SourcePath[];
}
