"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const matchingContentFile_1 = require("./matchingContentFile");
const bundle_1 = require("./bundle");
const base_1 = require("./base");
const mixedContent_1 = require("./mixedContent");
const errors_1 = require("../../errors");
var AdapterId;
(function (AdapterId) {
    AdapterId["Bundle"] = "bundle";
    AdapterId["MatchingContentFile"] = "matchingContentFile";
    AdapterId["MixedContent"] = "mixedContent";
})(AdapterId = exports.AdapterId || (exports.AdapterId = {}));
exports.getAdapter = (type, adapterId, forceIgnore) => {
    switch (adapterId) {
        case AdapterId.Bundle:
            return new bundle_1.Bundle(type, undefined, forceIgnore);
        case AdapterId.MatchingContentFile:
            return new matchingContentFile_1.MatchingContentFile(type, undefined, forceIgnore);
        case AdapterId.MixedContent:
            return new mixedContent_1.MixedContent(type, undefined, forceIgnore);
        case undefined:
            return new base_1.BaseSourceAdapter(type, undefined, forceIgnore);
        default:
            throw new errors_1.RegistryError('error_missing_adapter', [type.name, adapterId]);
    }
};
//# sourceMappingURL=index.js.map