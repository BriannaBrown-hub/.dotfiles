"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const glob_1 = require("glob");
const vscode_languageserver_1 = require("vscode-languageserver");
const util_1 = require("util");
const fs = __importStar(require("fs-extra"));
const glob = util_1.promisify(glob_1.Glob);
const STATIC_RESOURCE_DECLARATION_FILE = '.sfdx/typings/lwc/staticresources.d.ts';
const STATIC_RESOURCES = new Set();
function resetStaticResources() {
    STATIC_RESOURCES.clear();
}
exports.resetStaticResources = resetStaticResources;
function getResourceName(resourceMetaFile) {
    const resourceFile = resourceMetaFile.substring(0, resourceMetaFile.lastIndexOf('-'));
    return path_1.parse(resourceFile).name;
}
async function updateStaticResourceIndex(updatedFiles, { workspaceRoots }, writeConfigs = true) {
    let didChange = false;
    for (const f of updatedFiles) {
        if (f.uri.endsWith('.resource-meta.xml')) {
            if (f.type === vscode_languageserver_1.FileChangeType.Created) {
                didChange = true;
                STATIC_RESOURCES.add(getResourceName(f.uri));
            }
            else if (f.type === vscode_languageserver_1.FileChangeType.Deleted) {
                STATIC_RESOURCES.delete(getResourceName(f.uri));
                didChange = true;
            }
        }
    }
    if (didChange) {
        return processStaticResources(workspaceRoots[0], writeConfigs);
    }
}
exports.updateStaticResourceIndex = updateStaticResourceIndex;
async function processStaticResources(workspace, writeConfigs) {
    if (STATIC_RESOURCES.size > 0 && writeConfigs) {
        return fs.writeFile(path_1.join(workspace, STATIC_RESOURCE_DECLARATION_FILE), generateResourceTypeDeclarations());
    }
}
async function indexStaticResources(context, writeConfigs = true) {
    const { workspaceRoots } = context;
    const { sfdxPackageDirsPattern } = await context.getSfdxProjectConfig();
    const STATIC_RESOURCE_GLOB_PATTERN = `${sfdxPackageDirsPattern}/**/staticresources/*.resource-meta.xml`;
    try {
        const files = await glob(STATIC_RESOURCE_GLOB_PATTERN, { cwd: workspaceRoots[0] });
        for (const file of files) {
            STATIC_RESOURCES.add(getResourceName(file));
        }
        return processStaticResources(workspaceRoots[0], writeConfigs);
    }
    catch (err) {
        console.log(`Error queuing up indexing of static resources. Error details:`, err);
        throw err;
    }
}
exports.indexStaticResources = indexStaticResources;
function generateResourceTypeDeclarations() {
    let resTypeDecs = '';
    const sortedStaticResources = Array.from(STATIC_RESOURCES).sort();
    sortedStaticResources.forEach(res => {
        resTypeDecs += generateResourceTypeDeclaration(res);
    });
    return resTypeDecs;
}
function generateResourceTypeDeclaration(resourceName) {
    const result = `declare module "@salesforce/resourceUrl/${resourceName}" {
    var ${resourceName}: string;
    export default ${resourceName};
}
`;
    return result;
}
//# sourceMappingURL=static-resources-util.js.map